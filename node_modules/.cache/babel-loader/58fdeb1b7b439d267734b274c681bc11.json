{"ast":null,"code":"(function () {\n  var emitter,\n      representer,\n      resolver,\n      serializer,\n      util,\n      slice = [].slice;\n  util = require('./util');\n  emitter = require('./emitter');\n  serializer = require('./serializer');\n  representer = require('./representer');\n  resolver = require('./resolver');\n\n  this.make_dumper = function (Emitter, Serializer, Representer, Resolver) {\n    var Dumper, components;\n\n    if (Emitter == null) {\n      Emitter = emitter.Emitter;\n    }\n\n    if (Serializer == null) {\n      Serializer = serializer.Serializer;\n    }\n\n    if (Representer == null) {\n      Representer = representer.Representer;\n    }\n\n    if (Resolver == null) {\n      Resolver = resolver.Resolver;\n    }\n\n    components = [Emitter, Serializer, Representer, Resolver];\n    return Dumper = function () {\n      var component;\n      util.extend.apply(util, [Dumper.prototype].concat(slice.call(function () {\n        var i, len, results;\n        results = [];\n\n        for (i = 0, len = components.length; i < len; i++) {\n          component = components[i];\n          results.push(component.prototype);\n        }\n\n        return results;\n      }())));\n\n      function Dumper(stream, options) {\n        var i, len, ref;\n\n        if (options == null) {\n          options = {};\n        }\n\n        components[0].call(this, stream, options);\n        ref = components.slice(1);\n\n        for (i = 0, len = ref.length; i < len; i++) {\n          component = ref[i];\n          component.call(this, options);\n        }\n      }\n\n      return Dumper;\n    }();\n  };\n\n  this.Dumper = this.make_dumper();\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}