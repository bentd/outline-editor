{"ast":null,"code":"(function () {\n  var indexOf = [].indexOf || function (item) {\n    for (var i = 0, l = this.length; i < l; i++) {\n      if (i in this && this[i] === item) return i;\n    }\n\n    return -1;\n  },\n      extend = function extend(child, parent) {\n    for (var key in parent) {\n      if (hasProp.call(parent, key)) child[key] = parent[key];\n    }\n\n    function ctor() {\n      this.constructor = child;\n    }\n\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n    child.__super__ = parent.prototype;\n    return child;\n  },\n      hasProp = {}.hasOwnProperty;\n\n  this.Mark = function () {\n    function Mark(line, column, buffer, pointer) {\n      this.line = line;\n      this.column = column;\n      this.buffer = buffer;\n      this.pointer = pointer;\n    }\n\n    Mark.prototype.get_snippet = function (indent, max_length) {\n      var break_chars, end, head, ref, ref1, start, tail;\n\n      if (indent == null) {\n        indent = 4;\n      }\n\n      if (max_length == null) {\n        max_length = 75;\n      }\n\n      if (this.buffer == null) {\n        return null;\n      }\n\n      break_chars = \"\\0\\r\\n\\x85\\u2028\\u2029\";\n      head = '';\n      start = this.pointer;\n\n      while (start > 0 && (ref = this.buffer[start - 1], indexOf.call(break_chars, ref) < 0)) {\n        start--;\n\n        if (this.pointer - start > max_length / 2 - 1) {\n          head = ' ... ';\n          start += 5;\n          break;\n        }\n      }\n\n      tail = '';\n      end = this.pointer;\n\n      while (end < this.buffer.length && (ref1 = this.buffer[end], indexOf.call(break_chars, ref1) < 0)) {\n        end++;\n\n        if (end - this.pointer > max_length / 2 - 1) {\n          tail = ' ... ';\n          end -= 5;\n          break;\n        }\n      }\n\n      return \"\" + new Array(indent).join(' ') + head + this.buffer.slice(start, end) + tail + \"\\n\" + new Array(indent + this.pointer - start + head.length).join(' ') + \"^\";\n    };\n\n    Mark.prototype.toString = function () {\n      var snippet, where;\n      snippet = this.get_snippet();\n      where = \"  on line \" + (this.line + 1) + \", column \" + (this.column + 1);\n\n      if (snippet) {\n        return where;\n      } else {\n        return where + \":\\n\" + snippet;\n      }\n    };\n\n    return Mark;\n  }();\n\n  this.YAMLError = function (superClass) {\n    extend(YAMLError, superClass);\n\n    function YAMLError(message) {\n      this.message = message;\n\n      YAMLError.__super__.constructor.call(this);\n\n      this.stack = this.toString() + '\\n' + new Error().stack.split('\\n').slice(1).join('\\n');\n    }\n\n    YAMLError.prototype.toString = function () {\n      return this.message;\n    };\n\n    return YAMLError;\n  }(Error);\n\n  this.MarkedYAMLError = function (superClass) {\n    extend(MarkedYAMLError, superClass);\n\n    function MarkedYAMLError(context, context_mark, problem, problem_mark, note) {\n      this.context = context;\n      this.context_mark = context_mark;\n      this.problem = problem;\n      this.problem_mark = problem_mark;\n      this.note = note;\n\n      MarkedYAMLError.__super__.constructor.call(this);\n    }\n\n    MarkedYAMLError.prototype.toString = function () {\n      var lines;\n      lines = [];\n\n      if (this.context != null) {\n        lines.push(this.context);\n      }\n\n      if (this.context_mark != null && (this.problem == null || this.problem_mark == null || this.context_mark.line !== this.problem_mark.line || this.context_mark.column !== this.problem_mark.column)) {\n        lines.push(this.context_mark.toString());\n      }\n\n      if (this.problem != null) {\n        lines.push(this.problem);\n      }\n\n      if (this.problem_mark != null) {\n        lines.push(this.problem_mark.toString());\n      }\n\n      if (this.note != null) {\n        lines.push(this.note);\n      }\n\n      return lines.join('\\n');\n    };\n\n    return MarkedYAMLError;\n  }(this.YAMLError);\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}