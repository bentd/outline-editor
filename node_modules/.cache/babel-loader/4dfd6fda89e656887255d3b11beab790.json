{"ast":null,"code":"import $ from \"jquery\";\nvar ADD_BULLET = \"ADD_BULLET\";\nvar EDIT_BULLET = \"EDIT_BULLET\";\nvar REMOVE_BULLET = \"REMOVE_BULLET\";\nvar INDENT_BULLET = \"INDENT_BULLET\";\nvar UNINDENT_BULLET = \"UNINDENT_BULLET\";\nvar CHANGE_CURRENT_NOTE = \"CHANGE_CURRENT_NOTE\";\n\nfunction addBullet(position, uuid) {\n  return {\n    type: ADD_BULLET,\n    position: position,\n    uuid: uuid,\n    exec: function exec(state) {\n      var childPosition = position.pop();\n      var parent = state.root[position.shift()].children;\n\n      while (position.length > 0) {\n        parent = state.root[position.shift()].children;\n      }\n\n      parent.splice(childPosition + 1, 0, {\n        content: \"\",\n        note: \"\",\n        id: uuid,\n        completed: false,\n        children: []\n      });\n      setTimeout(function () {\n        document.getElementById(uuid).focus();\n      }, 0);\n      return state;\n    }\n  };\n}\n\nfunction editBullet(position, content) {\n  return {\n    type: EDIT_BULLET,\n    position: position,\n    content: content\n  };\n}\n\nfunction removeBullet(position) {\n  return {\n    type: REMOVE_BULLET,\n    position: position\n  };\n}\n\nfunction indentBullet(position) {\n  return {\n    type: INDENT_BULLET,\n    position: position,\n    exec: function exec(state) {\n      if (position.slice(-1)[0] == 0) {\n        return state;\n      }\n\n      var parents = getTree(position.slice(0, -1), state.root);\n      var oldParent = parents.pop();\n      var newParent = oldParent.children[position.slice(-1)[0] - 1];\n      var child = oldParent.children.splice(position.slice(-1)[0], 1);\n      newParent.children.push(child);\n      parents.push(oldParent);\n      parents.push(newParent);\n      setTimeout(function () {\n        parents.map(function (parent) {\n          $(\"#\".concat(parent.id)).closest(\".bullet\").children(\".collapse\").addClass(\"show\");\n        });\n      }, 0);\n      console.log;\n      return state;\n    }\n  };\n}\n\nfunction unindentBullet(position) {\n  return {\n    type: UNINDENT_BULLET,\n    position: position,\n    exec: function exec(state) {\n      var childPosition = position.pop();\n\n      if (childPosition == 0) {\n        return state;\n      }\n\n      var parents = [];\n      var parentPosition = position.shift();\n      var parent = state.root[parentPosition];\n      parents.push(parent);\n\n      while (position.length > 0) {\n        parentPosition = position.shift();\n        parent = parent.children[parentPosition];\n        parents.push(parent);\n      }\n\n      var child = parent.children.splice(childPosition, 1)[0];\n      var above = parent.children[childPosition - 1];\n      above.children.push(child);\n      parents.push(above);\n      setTimeout(function () {\n        for (var x = 0; x < parents.length; x++) {\n          var selector = \"#\".concat(parents[x].id);\n          console.log(selector);\n          $(selector).closest(\".bullet\").find(\".collapse\").addClass(\"show\");\n        }\n      }, 0);\n      return state;\n    }\n  };\n}\n\nfunction getNode(indices, root) {\n  var node = root[indices.shift()];\n\n  while (indices.length > 0) {\n    node = node.children[indices.shift()];\n  }\n\n  return node;\n}\n\nfunction getTree(indices, root) {\n  console.log(\"indices\", indices);\n  var tree = [];\n  var node = root[indices.shift()];\n  console.log(\"node\", node);\n  tree.push(node);\n\n  while (indices.length > 0) {\n    node = node.children[indices.shift()];\n    console.log(\"node\", node);\n    tree.push(node);\n  }\n\n  return tree;\n}\n\nexport { ADD_BULLET, EDIT_BULLET, REMOVE_BULLET, INDENT_BULLET, UNINDENT_BULLET, addBullet, editBullet, removeBullet, indentBullet, unindentBullet, getNode, getTree };","map":{"version":3,"sources":["/Users/bentd/Work/Notes/bullet-editor/src/Actions.js"],"names":["$","ADD_BULLET","EDIT_BULLET","REMOVE_BULLET","INDENT_BULLET","UNINDENT_BULLET","CHANGE_CURRENT_NOTE","addBullet","position","uuid","type","exec","state","childPosition","pop","parent","root","shift","children","length","splice","content","note","id","completed","setTimeout","document","getElementById","focus","editBullet","removeBullet","indentBullet","slice","parents","getTree","oldParent","newParent","child","push","map","closest","addClass","console","log","unindentBullet","parentPosition","above","x","selector","find","getNode","indices","node","tree"],"mappings":"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","sourcesContent":["import $ from \"jquery\";\n\nconst ADD_BULLET = \"ADD_BULLET\";\nconst EDIT_BULLET = \"EDIT_BULLET\";\nconst REMOVE_BULLET = \"REMOVE_BULLET\";\nconst INDENT_BULLET = \"INDENT_BULLET\";\nconst UNINDENT_BULLET = \"UNINDENT_BULLET\";\nconst CHANGE_CURRENT_NOTE = \"CHANGE_CURRENT_NOTE\";\n\nfunction addBullet(position, uuid) {\n  return {\n    type: ADD_BULLET,\n    position,\n    uuid,\n    exec: (state) => {\n      let childPosition = position.pop();\n      let parent = state.root[position.shift()].children;\n      while (position.length > 0) {\n        parent = state.root[position.shift()].children;\n      }\n      parent.splice(childPosition + 1, 0, {content: \"\", note: \"\", id: uuid, completed: false, children: []});\n      setTimeout(() => {\n        document.getElementById(uuid).focus();\n      }, 0);\n      return state;\n    }\n  }\n}\n\nfunction editBullet(position, content) {\n  return {\n    type: EDIT_BULLET,\n    position,\n    content\n  }\n}\n\nfunction removeBullet(position) {\n  return {\n    type: REMOVE_BULLET,\n    position\n  }\n}\n\nfunction indentBullet(position) {\n  return {\n    type: INDENT_BULLET,\n    position,\n    exec: (state) => {\n      if (position.slice(-1)[0] == 0) { return state }\n      let parents = getTree(position.slice(0, -1), state.root);\n      let oldParent = parents.pop();\n      let newParent = oldParent.children[position.slice(-1)[0]-1];\n      let child = oldParent.children.splice(position.slice(-1)[0], 1);\n      newParent.children.push(child);\n      parents.push(oldParent);\n      parents.push(newParent);\n      setTimeout(() => {\n        parents.map(parent => {\n          $(`#${parent.id}`).closest(\".bullet\").children(\".collapse\").addClass(\"show\");\n        });\n      }, 0);\n      console.log\n      return state;\n    }\n  }\n}\n\nfunction unindentBullet(position) {\n  return {\n    type: UNINDENT_BULLET,\n    position,\n    exec: (state) => {\n      let childPosition = position.pop();\n      if (childPosition == 0) { return state }\n      let parents = [];\n      let parentPosition = position.shift();\n      let parent = state.root[parentPosition];\n      parents.push(parent);\n      while (position.length > 0) {\n        parentPosition = position.shift();\n        parent = parent.children[parentPosition];\n        parents.push(parent);\n      }\n      let child = parent.children.splice(childPosition, 1)[0];\n      let above = parent.children[childPosition-1];\n      above.children.push(child);\n      parents.push(above);\n      setTimeout(() => {\n        for (let x = 0; x < parents.length; x++) {\n          let selector = `#${ parents[x].id }`;\n          console.log(selector);\n          $(selector).closest(\".bullet\").find(\".collapse\").addClass(\"show\");\n        }\n      }, 0);\n      return state;\n    }\n  }\n}\n\nfunction getNode(indices, root) {\n  let node = root[indices.shift()];\n  while (indices.length > 0) {\n    node = node.children[indices.shift()];\n  }\n  return node;\n}\n\nfunction getTree(indices, root) {\n  console.log(\"indices\", indices);\n  let tree = [];\n  let node = root[indices.shift()];\n  console.log(\"node\", node);\n  tree.push(node)\n  while (indices.length > 0) {\n    node = node.children[indices.shift()];\n    console.log(\"node\", node);\n    tree.push(node);\n  }\n  return tree;\n}\n\n\n\nexport { ADD_BULLET,\n         EDIT_BULLET,\n         REMOVE_BULLET,\n         INDENT_BULLET,\n         UNINDENT_BULLET,\n         addBullet,\n         editBullet,\n         removeBullet,\n         indentBullet,\n         unindentBullet,\n         getNode,\n         getTree };\n"]},"metadata":{},"sourceType":"module"}