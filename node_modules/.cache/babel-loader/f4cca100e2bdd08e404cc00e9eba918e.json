{"ast":null,"code":"\"use strict\";\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar ComponentManager = function () {\n  function ComponentManager(permissions, onReady) {\n    _classCallCheck(this, ComponentManager);\n\n    this.sentMessages = [];\n    this.messageQueue = [];\n    this.loggingEnabled = false;\n    this.acceptsThemes = true;\n    this.activeThemes = [];\n    this.initialPermissions = permissions;\n    this.onReadyCallback = onReady;\n    this.coallesedSaving = true;\n    this.coallesedSavingDelay = 250;\n    this.registerMessageHandler();\n  }\n\n  _createClass(ComponentManager, [{\n    key: \"registerMessageHandler\",\n    value: function registerMessageHandler() {\n      var _this = this;\n\n      var messageHandler = function messageHandler(event, mobileSource) {\n        if (_this.loggingEnabled) {\n          console.log(\"Components API Message received:\", event.data, \"mobile?\", mobileSource);\n        } // The first message will be the most reliable one, so we won't change it after any subsequent events,\n        // in case you receive an event from another window.\n\n\n        if (!_this.origin) {\n          _this.origin = event.origin;\n        }\n\n        _this.mobileSource = mobileSource; // If from mobile app, JSON needs to be used.\n\n        var data = mobileSource ? JSON.parse(event.data) : event.data;\n\n        _this.handleMessage(data);\n      }; // Mobile (React Native) uses `document`, web/desktop uses `window`.addEventListener\n      // for postMessage API to work properly.\n\n\n      document.addEventListener(\"message\", function (event) {\n        messageHandler(event, true);\n      }, false);\n      window.addEventListener(\"message\", function (event) {\n        messageHandler(event, false);\n      }, false);\n    }\n  }, {\n    key: \"handleMessage\",\n    value: function handleMessage(payload) {\n      if (payload.action === \"component-registered\") {\n        this.sessionKey = payload.sessionKey;\n        this.componentData = payload.componentData;\n        this.onReady(payload.data);\n\n        if (this.loggingEnabled) {\n          console.log(\"Component successfully registered with payload:\", payload);\n        }\n      } else if (payload.action === \"themes\") {\n        if (this.acceptsThemes) {\n          this.activateThemes(payload.data.themes);\n        }\n      } else if (payload.original) {\n        // get callback from queue\n        var originalMessage = this.sentMessages.filter(function (message) {\n          return message.messageId === payload.original.messageId;\n        })[0];\n\n        if (!originalMessage) {\n          // Connection must have been reset. Alert the user.\n          alert(\"This extension is attempting to communicate with Standard Notes, but an error is preventing it from doing so. Please restart this extension and try again.\");\n        }\n\n        if (originalMessage.callback) {\n          originalMessage.callback(payload.data);\n        }\n      }\n    }\n  }, {\n    key: \"onReady\",\n    value: function onReady(data) {\n      if (this.initialPermissions && this.initialPermissions.length > 0) {\n        this.requestPermissions(this.initialPermissions);\n      }\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.messageQueue[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var message = _step.value;\n          this.postMessage(message.action, message.data, message.callback);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      this.messageQueue = [];\n      this.environment = data.environment;\n      this.platform = data.platform;\n      this.uuid = data.uuid;\n\n      if (this.loggingEnabled) {\n        console.log(\"onReadyData\", data);\n      }\n\n      this.activateThemes(data.activeThemeUrls || []);\n\n      if (this.onReadyCallback) {\n        this.onReadyCallback();\n      }\n    }\n  }, {\n    key: \"getSelfComponentUUID\",\n    value: function getSelfComponentUUID() {\n      return this.uuid;\n    }\n  }, {\n    key: \"isRunningInDesktopApplication\",\n    value: function isRunningInDesktopApplication() {\n      return this.environment === \"desktop\";\n    }\n  }, {\n    key: \"setComponentDataValueForKey\",\n    value: function setComponentDataValueForKey(key, value) {\n      this.componentData[key] = value;\n      this.postMessage(\"set-component-data\", {\n        componentData: this.componentData\n      }, function (data) {});\n    }\n  }, {\n    key: \"clearComponentData\",\n    value: function clearComponentData() {\n      this.componentData = {};\n      this.postMessage(\"set-component-data\", {\n        componentData: this.componentData\n      }, function (data) {});\n    }\n  }, {\n    key: \"componentDataValueForKey\",\n    value: function componentDataValueForKey(key) {\n      return this.componentData[key];\n    }\n  }, {\n    key: \"postMessage\",\n    value: function postMessage(action, data, callback) {\n      if (!this.sessionKey) {\n        this.messageQueue.push({\n          action: action,\n          data: data,\n          callback: callback\n        });\n        return;\n      }\n\n      var message = {\n        action: action,\n        data: data,\n        messageId: this.generateUUID(),\n        sessionKey: this.sessionKey,\n        api: \"component\"\n      };\n      var sentMessage = JSON.parse(JSON.stringify(message));\n      sentMessage.callback = callback;\n      this.sentMessages.push(sentMessage); // Mobile (React Native) requires a string for the postMessage API.\n\n      if (this.mobileSource) {\n        message = JSON.stringify(message);\n      }\n\n      if (this.loggingEnabled) {\n        console.log(\"Posting message:\", message);\n      }\n\n      window.parent.postMessage(message, this.origin);\n    }\n  }, {\n    key: \"setSize\",\n    value: function setSize(type, width, height) {\n      this.postMessage(\"set-size\", {\n        type: type,\n        width: width,\n        height: height\n      }, function (data) {});\n    }\n  }, {\n    key: \"requestPermissions\",\n    value: function requestPermissions(permissions, callback) {\n      this.postMessage(\"request-permissions\", {\n        permissions: permissions\n      }, function (data) {\n        callback && callback();\n      }.bind(this));\n    }\n  }, {\n    key: \"streamItems\",\n    value: function streamItems(contentTypes, callback) {\n      if (!Array.isArray(contentTypes)) {\n        contentTypes = [contentTypes];\n      }\n\n      this.postMessage(\"stream-items\", {\n        content_types: contentTypes\n      }, function (data) {\n        callback(data.items);\n      }.bind(this));\n    }\n  }, {\n    key: \"streamContextItem\",\n    value: function streamContextItem(callback) {\n      this.postMessage(\"stream-context-item\", null, function (data) {\n        var item = data.item;\n        /*\n          When an item is saved via saveItem, its updated_at value is set client side to the current date.\n          If we make a change locally, then for whatever reason receive an item via streamItems/streamContextItem,\n          we want to ignore that change if it was made prior to the latest change we've made.\n           Update 1/22/18: However, if a user is restoring a note from version history, this change\n          will not pass through this filter and will thus be ignored. Because the client now handles\n          this case with isMetadataUpdate, we no longer need the below.\n        */\n        // if(this.streamedContextItem && this.streamedContextItem.uuid == item.uuid\n        //   && this.streamedContextItem.updated_at > item.updated_at) {\n        //   return;\n        // }\n        // this.streamedContextItem = item;\n\n        callback(item);\n      });\n    }\n  }, {\n    key: \"selectItem\",\n    value: function selectItem(item) {\n      this.postMessage(\"select-item\", {\n        item: this.jsonObjectForItem(item)\n      });\n    }\n  }, {\n    key: \"createItem\",\n    value: function createItem(item, callback) {\n      this.postMessage(\"create-item\", {\n        item: this.jsonObjectForItem(item)\n      }, function (data) {\n        var item = data.item; // A previous version of the SN app had an issue where the item in the reply to create-item\n        // would be nested inside \"items\" and not \"item\". So handle both cases here.\n\n        if (!item && data.items && data.items.length > 0) {\n          item = data.items[0];\n        }\n\n        this.associateItem(item);\n        callback && callback(item);\n      }.bind(this));\n    }\n  }, {\n    key: \"createItems\",\n    value: function createItems(items, callback) {\n      var _this2 = this;\n\n      var mapped = items.map(function (item) {\n        return _this2.jsonObjectForItem(item);\n      });\n      this.postMessage(\"create-items\", {\n        items: mapped\n      }, function (data) {\n        callback && callback(data.items);\n      }.bind(this));\n    }\n  }, {\n    key: \"associateItem\",\n    value: function associateItem(item) {\n      this.postMessage(\"associate-item\", {\n        item: this.jsonObjectForItem(item)\n      });\n    }\n  }, {\n    key: \"deassociateItem\",\n    value: function deassociateItem(item) {\n      this.postMessage(\"deassociate-item\", {\n        item: this.jsonObjectForItem(item)\n      });\n    }\n  }, {\n    key: \"clearSelection\",\n    value: function clearSelection() {\n      this.postMessage(\"clear-selection\", {\n        content_type: \"Tag\"\n      });\n    }\n  }, {\n    key: \"deleteItem\",\n    value: function deleteItem(item, callback) {\n      this.deleteItems([item], callback);\n    }\n  }, {\n    key: \"deleteItems\",\n    value: function deleteItems(items, callback) {\n      var params = {\n        items: items.map(function (item) {\n          return this.jsonObjectForItem(item);\n        }.bind(this))\n      };\n      this.postMessage(\"delete-items\", params, function (data) {\n        callback && callback(data);\n      });\n    }\n  }, {\n    key: \"sendCustomEvent\",\n    value: function sendCustomEvent(action, data, callback) {\n      this.postMessage(action, data, function (data) {\n        callback && callback(data);\n      }.bind(this));\n    }\n  }, {\n    key: \"saveItem\",\n    value: function saveItem(item, callback) {\n      var skipDebouncer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      this.saveItems([item], callback, skipDebouncer);\n    }\n    /* Presave allows clients to perform any actions last second before the save actually occurs (like setting previews).\n       Saves debounce by default, so if a client needs to compute a property on an item before saving, it's best to\n       hook into the debounce cycle so that clients don't have to implement their own debouncing.\n     */\n\n  }, {\n    key: \"saveItemWithPresave\",\n    value: function saveItemWithPresave(item, presave, callback) {\n      this.saveItemsWithPresave([item], presave, callback);\n    }\n  }, {\n    key: \"saveItemsWithPresave\",\n    value: function saveItemsWithPresave(items, presave, callback) {\n      this.saveItems(items, callback, false, presave);\n    }\n    /*\n    skipDebouncer allows saves to go through right away rather than waiting for timeout.\n    This should be used when saving items via other means besides keystrokes.\n     */\n\n  }, {\n    key: \"saveItems\",\n    value: function saveItems(items, callback) {\n      var _this3 = this;\n\n      var skipDebouncer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var presave = arguments[3];\n\n      var saveBlock = function saveBlock() {\n        // presave block allows client to gain the benefit of performing something in the debounce cycle.\n        presave && presave();\n        var mappedItems = items.map(function (item) {\n          item.updated_at = new Date();\n          return this.jsonObjectForItem(item);\n        }.bind(_this3));\n\n        _this3.postMessage(\"save-items\", {\n          items: mappedItems\n        }, function (data) {\n          callback && callback();\n        });\n      };\n      /*\n        Coallesed saving prevents saves from being made after every keystroke, and instead\n        waits coallesedSavingDelay before performing action. For example, if a user types a keystroke, and the clienet calls saveItem,\n        a 250ms delay will begin. If they type another keystroke within 250ms, the previously pending\n        save will be cancelled, and another 250ms delay occurs. If ater 250ms the pending delay is not cleared by a future call,\n        the save will finally trigger.\n         Note: it's important to modify saving items updated_at immediately and not after delay. If you modify after delay,\n        a delayed sync could just be wrapping up, and will send back old data and replace what the user has typed.\n      */\n\n\n      if (this.coallesedSaving == true && !skipDebouncer) {\n        if (this.pendingSave) {\n          clearTimeout(this.pendingSave);\n        }\n\n        this.pendingSave = setTimeout(function () {\n          saveBlock();\n        }, this.coallesedSavingDelay);\n      } else {\n        saveBlock();\n      }\n    }\n  }, {\n    key: \"jsonObjectForItem\",\n    value: function jsonObjectForItem(item) {\n      var copy = Object.assign({}, item);\n      copy.children = null;\n      copy.parent = null;\n      return copy;\n    }\n  }, {\n    key: \"getItemAppDataValue\",\n    value: function getItemAppDataValue(item, key) {\n      var AppDomain = \"org.standardnotes.sn\";\n      var data = item.content.appData && item.content.appData[AppDomain];\n\n      if (data) {\n        return data[key];\n      } else {\n        return null;\n      }\n    }\n    /* Themes */\n\n  }, {\n    key: \"activateThemes\",\n    value: function activateThemes(incomingUrls) {\n      if (this.loggingEnabled) {\n        console.log(\"Incoming themes\", incomingUrls);\n      }\n\n      if (this.activeThemes.sort().toString() == incomingUrls.sort().toString()) {\n        // incoming are same as active, do nothing\n        return;\n      }\n\n      var themesToActivate = incomingUrls || [];\n      var themesToDeactivate = [];\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = this.activeThemes[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var activeUrl = _step2.value;\n\n          if (!incomingUrls.includes(activeUrl)) {\n            // active not present in incoming, deactivate it\n            themesToDeactivate.push(activeUrl);\n          } else {\n            // already present in active themes, remove it from themesToActivate\n            themesToActivate = themesToActivate.filter(function (candidate) {\n              return candidate != activeUrl;\n            });\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      if (this.loggingEnabled) {\n        console.log(\"Deactivating themes:\", themesToDeactivate);\n        console.log(\"Activating themes:\", themesToActivate);\n      }\n\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = themesToDeactivate[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var theme = _step3.value;\n          this.deactivateTheme(theme);\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n\n      this.activeThemes = incomingUrls;\n      var _iteratorNormalCompletion4 = true;\n      var _didIteratorError4 = false;\n      var _iteratorError4 = undefined;\n\n      try {\n        for (var _iterator4 = themesToActivate[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n          var url = _step4.value;\n\n          if (!url) {\n            continue;\n          }\n\n          var link = document.createElement(\"link\");\n          link.id = btoa(url);\n          link.href = url;\n          link.type = \"text/css\";\n          link.rel = \"stylesheet\";\n          link.media = \"screen,print\";\n          link.className = \"custom-theme\";\n          document.getElementsByTagName(\"head\")[0].appendChild(link);\n        }\n      } catch (err) {\n        _didIteratorError4 = true;\n        _iteratorError4 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion4 && _iterator4.return) {\n            _iterator4.return();\n          }\n        } finally {\n          if (_didIteratorError4) {\n            throw _iteratorError4;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"themeElementForUrl\",\n    value: function themeElementForUrl(url) {\n      var elements = Array.from(document.getElementsByClassName(\"custom-theme\")).slice();\n      return elements.find(function (element) {\n        // We used to search here by `href`, but on desktop, with local file:// urls, that didn't work for some reason.\n        return element.id == btoa(url);\n      });\n    }\n  }, {\n    key: \"deactivateTheme\",\n    value: function deactivateTheme(url) {\n      var element = this.themeElementForUrl(url);\n\n      if (element) {\n        element.disabled = true;\n        element.parentNode.removeChild(element);\n      }\n    }\n    /* Theme caching is currently disabled. Might be enabled in the future if neccessary. */\n\n    /*\n    activateCachedThemes() {\n      let themes = this.getCachedThemeUrls();\n      let writeToCache = false;\n      if(this.loggingEnabled) { console.log(\"Activating cached themes\", themes); }\n      this.activateThemes(themes, writeToCache);\n    }\n     cacheThemeUrls(urls) {\n      if(this.loggingEnabled) { console.log(\"Caching theme urls\", urls); }\n      localStorage.setItem(\"cachedThemeUrls\", JSON.stringify(urls));\n    }\n     decacheThemeUrls() {\n      localStorage.removeItem(\"cachedThemeUrls\");\n    }\n     getCachedThemeUrls() {\n      let urls = localStorage.getItem(\"cachedThemeUrls\");\n      if(urls) {\n        return JSON.parse(urls);\n      } else {\n        return [];\n      }\n    }\n    */\n\n    /* Utilities */\n\n  }, {\n    key: \"generateUUID\",\n    value: function generateUUID() {\n      var crypto = window.crypto || window.msCrypto;\n\n      if (crypto) {\n        var buf = new Uint32Array(4);\n        crypto.getRandomValues(buf);\n        var idx = -1;\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n          idx++;\n          var r = buf[idx >> 3] >> idx % 8 * 4 & 15;\n          var v = c == 'x' ? r : r & 0x3 | 0x8;\n          return v.toString(16);\n        });\n      } else {\n        var d = new Date().getTime();\n\n        if (window.performance && typeof window.performance.now === \"function\") {\n          d += performance.now(); //use high-precision timer if available\n        }\n\n        var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n          var r = (d + Math.random() * 16) % 16 | 0;\n          d = Math.floor(d / 16);\n          return (c == 'x' ? r : r & 0x3 | 0x8).toString(16);\n        });\n        return uuid;\n      }\n    }\n  }]);\n\n  return ComponentManager;\n}();\n\nif (typeof module != \"undefined\" && typeof module.exports != \"undefined\") {\n  module.exports = ComponentManager;\n}\n\nif (window) {\n  window.ComponentManager = ComponentManager;\n}","map":null,"metadata":{},"sourceType":"script"}