{"ast":null,"code":"import $ from \"jquery\";\nvar ADD_BULLET = \"ADD_BULLET\";\nvar EDIT_BULLET = \"EDIT_BULLET\";\nvar REMOVE_BULLET = \"REMOVE_BULLET\";\nvar INDENT_BULLET = \"INDENT_BULLET\";\nvar UNINDENT_BULLET = \"UNINDENT_BULLET\";\nvar CHANGE_CURRENT_NOTE = \"CHANGE_CURRENT_NOTE\";\n\nfunction addBullet(position, uuid) {\n  return {\n    type: ADD_BULLET,\n    position: position,\n    uuid: uuid,\n    exec: function exec(state) {\n      var childPosition = position.pop();\n      var parent = state.root[position.shift()].children;\n\n      while (position.length > 0) {\n        parent = state.root[position.shift()].children;\n      }\n\n      parent.splice(childPosition + 1, 0, {\n        content: \"\",\n        note: \"\",\n        id: uuid,\n        completed: false,\n        children: []\n      });\n      setTimeout(function () {\n        document.getElementById(uuid).focus();\n      }, 0);\n      return state;\n    }\n  };\n}\n\nfunction editBullet(position, content) {\n  return {\n    type: EDIT_BULLET,\n    position: position,\n    content: content\n  };\n}\n\nfunction removeBullet(position) {\n  return {\n    type: REMOVE_BULLET,\n    position: position\n  };\n}\n\nfunction indentBullet(position) {\n  return {\n    type: INDENT_BULLET,\n    position: position,\n    exec: function exec(state) {\n      if (position.slice(-1)[0] == 0) {\n        return state;\n      }\n\n      var tree = getTree(position.slice(), state.root);\n      var oldParent = tree.slice(-2, -1)[0];\n      var child = oldParent.children.splice(position.slice(-1)[0], 1)[0];\n      var newParent = oldParent.children[position.slice(-1)[0] - 1];\n      newParent.children.push(child);\n      tree.pop();\n      tree.push(newParent);\n      setTimeout(function () {\n        tree.map(function (parent) {\n          $(\"#\".concat(parent.id)).closest(\".bullet\").children(\".collapse\").addClass(\"show\");\n        });\n      }, 0);\n      console.log(\"indentBullet state\", state);\n      return state;\n    }\n  };\n}\n\nfunction unindentBullet(position) {\n  return {\n    type: UNINDENT_BULLET,\n    position: position,\n    exec: function exec(state) {\n      var childPosition = position.pop();\n\n      if (childPosition == 0) {\n        return state;\n      }\n\n      var parents = [];\n      var parentPosition = position.shift();\n      var parent = state.root[parentPosition];\n      parents.push(parent);\n\n      while (position.length > 0) {\n        parentPosition = position.shift();\n        parent = parent.children[parentPosition];\n        parents.push(parent);\n      }\n\n      var child = parent.children.splice(childPosition, 1)[0];\n      var above = parent.children[childPosition - 1];\n      above.children.push(child);\n      parents.push(above);\n      setTimeout(function () {\n        for (var x = 0; x < parents.length; x++) {\n          var selector = \"#\".concat(parents[x].id);\n          console.log(selector);\n          $(selector).closest(\".bullet\").find(\".collapse\").addClass(\"show\");\n        }\n      }, 0);\n      return state;\n    }\n  };\n}\n\nfunction getNode(indices, root) {\n  var node = root[indices.shift()];\n\n  while (indices.length > 0) {\n    node = node.children[indices.shift()];\n  }\n\n  return node;\n}\n\nfunction getTree(indices, root) {\n  var tree = [];\n  var node = root[indices.shift()];\n  tree.push(node);\n\n  while (indices.length > 0) {\n    node = node.children[indices.shift()];\n    console.log(\"node\", node);\n    tree.push(node);\n  }\n\n  return tree;\n}\n\nexport { ADD_BULLET, EDIT_BULLET, REMOVE_BULLET, INDENT_BULLET, UNINDENT_BULLET, addBullet, editBullet, removeBullet, indentBullet, unindentBullet, getNode, getTree };","map":{"version":3,"sources":["/Users/bentd/Work/Notes/bullet-editor/src/Actions.js"],"names":["$","ADD_BULLET","EDIT_BULLET","REMOVE_BULLET","INDENT_BULLET","UNINDENT_BULLET","CHANGE_CURRENT_NOTE","addBullet","position","uuid","type","exec","state","childPosition","pop","parent","root","shift","children","length","splice","content","note","id","completed","setTimeout","document","getElementById","focus","editBullet","removeBullet","indentBullet","slice","tree","getTree","oldParent","child","newParent","push","map","closest","addClass","console","log","unindentBullet","parents","parentPosition","above","x","selector","find","getNode","indices","node"],"mappings":"AAAA,OAAOA,CAAP,MAAc,QAAd;AAEA,IAAMC,UAAU,GAAG,YAAnB;AACA,IAAMC,WAAW,GAAG,aAApB;AACA,IAAMC,aAAa,GAAG,eAAtB;AACA,IAAMC,aAAa,GAAG,eAAtB;AACA,IAAMC,eAAe,GAAG,iBAAxB;AACA,IAAMC,mBAAmB,GAAG,qBAA5B;;AAEA,SAASC,SAAT,CAAmBC,QAAnB,EAA6BC,IAA7B,EAAmC;AACjC,SAAO;AACLC,IAAAA,IAAI,EAAET,UADD;AAELO,IAAAA,QAAQ,EAARA,QAFK;AAGLC,IAAAA,IAAI,EAAJA,IAHK;AAILE,IAAAA,IAAI,EAAE,cAACC,KAAD,EAAW;AACf,UAAIC,aAAa,GAAGL,QAAQ,CAACM,GAAT,EAApB;AACA,UAAIC,MAAM,GAAGH,KAAK,CAACI,IAAN,CAAWR,QAAQ,CAACS,KAAT,EAAX,EAA6BC,QAA1C;;AACA,aAAOV,QAAQ,CAACW,MAAT,GAAkB,CAAzB,EAA4B;AAC1BJ,QAAAA,MAAM,GAAGH,KAAK,CAACI,IAAN,CAAWR,QAAQ,CAACS,KAAT,EAAX,EAA6BC,QAAtC;AACD;;AACDH,MAAAA,MAAM,CAACK,MAAP,CAAcP,aAAa,GAAG,CAA9B,EAAiC,CAAjC,EAAoC;AAACQ,QAAAA,OAAO,EAAE,EAAV;AAAcC,QAAAA,IAAI,EAAE,EAApB;AAAwBC,QAAAA,EAAE,EAAEd,IAA5B;AAAkCe,QAAAA,SAAS,EAAE,KAA7C;AAAoDN,QAAAA,QAAQ,EAAE;AAA9D,OAApC;AACAO,MAAAA,UAAU,CAAC,YAAM;AACfC,QAAAA,QAAQ,CAACC,cAAT,CAAwBlB,IAAxB,EAA8BmB,KAA9B;AACD,OAFS,EAEP,CAFO,CAAV;AAGA,aAAOhB,KAAP;AACD;AAfI,GAAP;AAiBD;;AAED,SAASiB,UAAT,CAAoBrB,QAApB,EAA8Ba,OAA9B,EAAuC;AACrC,SAAO;AACLX,IAAAA,IAAI,EAAER,WADD;AAELM,IAAAA,QAAQ,EAARA,QAFK;AAGLa,IAAAA,OAAO,EAAPA;AAHK,GAAP;AAKD;;AAED,SAASS,YAAT,CAAsBtB,QAAtB,EAAgC;AAC9B,SAAO;AACLE,IAAAA,IAAI,EAAEP,aADD;AAELK,IAAAA,QAAQ,EAARA;AAFK,GAAP;AAID;;AAED,SAASuB,YAAT,CAAsBvB,QAAtB,EAAgC;AAC9B,SAAO;AACLE,IAAAA,IAAI,EAAEN,aADD;AAELI,IAAAA,QAAQ,EAARA,QAFK;AAGLG,IAAAA,IAAI,EAAE,cAACC,KAAD,EAAW;AACf,UAAIJ,QAAQ,CAACwB,KAAT,CAAe,CAAC,CAAhB,EAAmB,CAAnB,KAAyB,CAA7B,EAAgC;AAAE,eAAOpB,KAAP;AAAc;;AAChD,UAAIqB,IAAI,GAAGC,OAAO,CAAC1B,QAAQ,CAACwB,KAAT,EAAD,EAAmBpB,KAAK,CAACI,IAAzB,CAAlB;AACA,UAAImB,SAAS,GAAGF,IAAI,CAACD,KAAL,CAAW,CAAC,CAAZ,EAAe,CAAC,CAAhB,EAAmB,CAAnB,CAAhB;AACA,UAAII,KAAK,GAAGD,SAAS,CAACjB,QAAV,CAAmBE,MAAnB,CAA0BZ,QAAQ,CAACwB,KAAT,CAAe,CAAC,CAAhB,EAAmB,CAAnB,CAA1B,EAAiD,CAAjD,EAAoD,CAApD,CAAZ;AACA,UAAIK,SAAS,GAAGF,SAAS,CAACjB,QAAV,CAAmBV,QAAQ,CAACwB,KAAT,CAAe,CAAC,CAAhB,EAAmB,CAAnB,IAAsB,CAAzC,CAAhB;AACAK,MAAAA,SAAS,CAACnB,QAAV,CAAmBoB,IAAnB,CAAwBF,KAAxB;AACAH,MAAAA,IAAI,CAACnB,GAAL;AACAmB,MAAAA,IAAI,CAACK,IAAL,CAAUD,SAAV;AACAZ,MAAAA,UAAU,CAAC,YAAM;AACfQ,QAAAA,IAAI,CAACM,GAAL,CAAS,UAAAxB,MAAM,EAAI;AACjBf,UAAAA,CAAC,YAAKe,MAAM,CAACQ,EAAZ,EAAD,CAAmBiB,OAAnB,CAA2B,SAA3B,EAAsCtB,QAAtC,CAA+C,WAA/C,EAA4DuB,QAA5D,CAAqE,MAArE;AACD,SAFD;AAGD,OAJS,EAIP,CAJO,CAAV;AAKAC,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkC/B,KAAlC;AACA,aAAOA,KAAP;AACD;AAnBI,GAAP;AAqBD;;AAED,SAASgC,cAAT,CAAwBpC,QAAxB,EAAkC;AAChC,SAAO;AACLE,IAAAA,IAAI,EAAEL,eADD;AAELG,IAAAA,QAAQ,EAARA,QAFK;AAGLG,IAAAA,IAAI,EAAE,cAACC,KAAD,EAAW;AACf,UAAIC,aAAa,GAAGL,QAAQ,CAACM,GAAT,EAApB;;AACA,UAAID,aAAa,IAAI,CAArB,EAAwB;AAAE,eAAOD,KAAP;AAAc;;AACxC,UAAIiC,OAAO,GAAG,EAAd;AACA,UAAIC,cAAc,GAAGtC,QAAQ,CAACS,KAAT,EAArB;AACA,UAAIF,MAAM,GAAGH,KAAK,CAACI,IAAN,CAAW8B,cAAX,CAAb;AACAD,MAAAA,OAAO,CAACP,IAAR,CAAavB,MAAb;;AACA,aAAOP,QAAQ,CAACW,MAAT,GAAkB,CAAzB,EAA4B;AAC1B2B,QAAAA,cAAc,GAAGtC,QAAQ,CAACS,KAAT,EAAjB;AACAF,QAAAA,MAAM,GAAGA,MAAM,CAACG,QAAP,CAAgB4B,cAAhB,CAAT;AACAD,QAAAA,OAAO,CAACP,IAAR,CAAavB,MAAb;AACD;;AACD,UAAIqB,KAAK,GAAGrB,MAAM,CAACG,QAAP,CAAgBE,MAAhB,CAAuBP,aAAvB,EAAsC,CAAtC,EAAyC,CAAzC,CAAZ;AACA,UAAIkC,KAAK,GAAGhC,MAAM,CAACG,QAAP,CAAgBL,aAAa,GAAC,CAA9B,CAAZ;AACAkC,MAAAA,KAAK,CAAC7B,QAAN,CAAeoB,IAAf,CAAoBF,KAApB;AACAS,MAAAA,OAAO,CAACP,IAAR,CAAaS,KAAb;AACAtB,MAAAA,UAAU,CAAC,YAAM;AACf,aAAK,IAAIuB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,OAAO,CAAC1B,MAA5B,EAAoC6B,CAAC,EAArC,EAAyC;AACvC,cAAIC,QAAQ,cAAQJ,OAAO,CAACG,CAAD,CAAP,CAAWzB,EAAnB,CAAZ;AACAmB,UAAAA,OAAO,CAACC,GAAR,CAAYM,QAAZ;AACAjD,UAAAA,CAAC,CAACiD,QAAD,CAAD,CAAYT,OAAZ,CAAoB,SAApB,EAA+BU,IAA/B,CAAoC,WAApC,EAAiDT,QAAjD,CAA0D,MAA1D;AACD;AACF,OANS,EAMP,CANO,CAAV;AAOA,aAAO7B,KAAP;AACD;AA3BI,GAAP;AA6BD;;AAED,SAASuC,OAAT,CAAiBC,OAAjB,EAA0BpC,IAA1B,EAAgC;AAC9B,MAAIqC,IAAI,GAAGrC,IAAI,CAACoC,OAAO,CAACnC,KAAR,EAAD,CAAf;;AACA,SAAOmC,OAAO,CAACjC,MAAR,GAAiB,CAAxB,EAA2B;AACzBkC,IAAAA,IAAI,GAAGA,IAAI,CAACnC,QAAL,CAAckC,OAAO,CAACnC,KAAR,EAAd,CAAP;AACD;;AACD,SAAOoC,IAAP;AACD;;AAED,SAASnB,OAAT,CAAiBkB,OAAjB,EAA0BpC,IAA1B,EAAgC;AAC9B,MAAIiB,IAAI,GAAG,EAAX;AACA,MAAIoB,IAAI,GAAGrC,IAAI,CAACoC,OAAO,CAACnC,KAAR,EAAD,CAAf;AACAgB,EAAAA,IAAI,CAACK,IAAL,CAAUe,IAAV;;AACA,SAAOD,OAAO,CAACjC,MAAR,GAAiB,CAAxB,EAA2B;AACzBkC,IAAAA,IAAI,GAAGA,IAAI,CAACnC,QAAL,CAAckC,OAAO,CAACnC,KAAR,EAAd,CAAP;AACAyB,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBU,IAApB;AACApB,IAAAA,IAAI,CAACK,IAAL,CAAUe,IAAV;AACD;;AACD,SAAOpB,IAAP;AACD;;AAID,SAAShC,UAAT,EACSC,WADT,EAESC,aAFT,EAGSC,aAHT,EAISC,eAJT,EAKSE,SALT,EAMSsB,UANT,EAOSC,YAPT,EAQSC,YART,EASSa,cATT,EAUSO,OAVT,EAWSjB,OAXT","sourcesContent":["import $ from \"jquery\";\n\nconst ADD_BULLET = \"ADD_BULLET\";\nconst EDIT_BULLET = \"EDIT_BULLET\";\nconst REMOVE_BULLET = \"REMOVE_BULLET\";\nconst INDENT_BULLET = \"INDENT_BULLET\";\nconst UNINDENT_BULLET = \"UNINDENT_BULLET\";\nconst CHANGE_CURRENT_NOTE = \"CHANGE_CURRENT_NOTE\";\n\nfunction addBullet(position, uuid) {\n  return {\n    type: ADD_BULLET,\n    position,\n    uuid,\n    exec: (state) => {\n      let childPosition = position.pop();\n      let parent = state.root[position.shift()].children;\n      while (position.length > 0) {\n        parent = state.root[position.shift()].children;\n      }\n      parent.splice(childPosition + 1, 0, {content: \"\", note: \"\", id: uuid, completed: false, children: []});\n      setTimeout(() => {\n        document.getElementById(uuid).focus();\n      }, 0);\n      return state;\n    }\n  }\n}\n\nfunction editBullet(position, content) {\n  return {\n    type: EDIT_BULLET,\n    position,\n    content\n  }\n}\n\nfunction removeBullet(position) {\n  return {\n    type: REMOVE_BULLET,\n    position\n  }\n}\n\nfunction indentBullet(position) {\n  return {\n    type: INDENT_BULLET,\n    position,\n    exec: (state) => {\n      if (position.slice(-1)[0] == 0) { return state }\n      let tree = getTree(position.slice(), state.root);\n      let oldParent = tree.slice(-2, -1)[0];\n      let child = oldParent.children.splice(position.slice(-1)[0], 1)[0];\n      let newParent = oldParent.children[position.slice(-1)[0]-1];\n      newParent.children.push(child);\n      tree.pop();\n      tree.push(newParent);\n      setTimeout(() => {\n        tree.map(parent => {\n          $(`#${parent.id}`).closest(\".bullet\").children(\".collapse\").addClass(\"show\");\n        });\n      }, 0);\n      console.log(\"indentBullet state\", state);\n      return state;\n    }\n  }\n}\n\nfunction unindentBullet(position) {\n  return {\n    type: UNINDENT_BULLET,\n    position,\n    exec: (state) => {\n      let childPosition = position.pop();\n      if (childPosition == 0) { return state }\n      let parents = [];\n      let parentPosition = position.shift();\n      let parent = state.root[parentPosition];\n      parents.push(parent);\n      while (position.length > 0) {\n        parentPosition = position.shift();\n        parent = parent.children[parentPosition];\n        parents.push(parent);\n      }\n      let child = parent.children.splice(childPosition, 1)[0];\n      let above = parent.children[childPosition-1];\n      above.children.push(child);\n      parents.push(above);\n      setTimeout(() => {\n        for (let x = 0; x < parents.length; x++) {\n          let selector = `#${ parents[x].id }`;\n          console.log(selector);\n          $(selector).closest(\".bullet\").find(\".collapse\").addClass(\"show\");\n        }\n      }, 0);\n      return state;\n    }\n  }\n}\n\nfunction getNode(indices, root) {\n  let node = root[indices.shift()];\n  while (indices.length > 0) {\n    node = node.children[indices.shift()];\n  }\n  return node;\n}\n\nfunction getTree(indices, root) {\n  let tree = [];\n  let node = root[indices.shift()];\n  tree.push(node)\n  while (indices.length > 0) {\n    node = node.children[indices.shift()];\n    console.log(\"node\", node);\n    tree.push(node);\n  }\n  return tree;\n}\n\n\n\nexport { ADD_BULLET,\n         EDIT_BULLET,\n         REMOVE_BULLET,\n         INDENT_BULLET,\n         UNINDENT_BULLET,\n         addBullet,\n         editBullet,\n         removeBullet,\n         indentBullet,\n         unindentBullet,\n         getNode,\n         getTree };\n"]},"metadata":{},"sourceType":"module"}