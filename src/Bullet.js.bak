import React, { Component } from "react";
import { Collapse } from "react-bootstrap";
import "./Bullet.css";
import * as Actions from "./Actions.js";
//import $ from "jquery";
import uuidv1 from "uuid/v1";

class Bullet extends Component {

  constructor(props) {
    super(props);

    this.content = React.createRef();
    this.note = React.createRef();

    this.state = {
      ...this.props.self,
      expandVisible: false,
      noteEmpty: (this.props.self.note === ""),
      noteActive: false,
      deletable: (this.props.self.note === "" && this.props.self.content === ""),
      siblingBorder: false,
      childBorder: false
    };
  }

  onMouseEnter() {
    this.setState({ expandVisible: true });
  }

  onMouseLeave() {
    this.setState({ expandVisible: false });
  }

  onKeyDown(e) {
    switch (e.keyCode) {
      case 9: // tab
        if (e.shiftKey) { // shift + tab
          this.props.store.dispatch(Actions.unindentBullet([0, ...this.props.position]));
          e.preventDefault();
          break;
        }
        else { // tab
          this.props.store.dispatch(Actions.indentBullet([0, ...this.props.position]));
          e.preventDefault();
          break;
        }
      case 13: // enter
        if (e.shiftKey) {
          e.preventDefault();
          this.setState({ noteActive: true, noteEmpty: false });
          Actions.focusNodeNote(this.props.self);
          break;
        }
        else {
          let newUUID = uuidv1();
          this.props.store.dispatch(Actions.addBullet([0, ...this.props.position], newUUID));
          e.preventDefault();
          break;
        }
      case 38: // key up
        e.preventDefault();
        break;
      default:
        if (this.content.current.innerText === "") {
          this.setState({ deletable: true });
        }
        break;
    }
  }

  onKeyUp(e) {
    switch (e.keyCode) {
      case 8: // backspace
        if (this.state.deletable) {
          this.props.store.dispatch(Actions.deleteBullet([0, ...this.props.position]));
          e.preventDefault();
          break;
        }
        break;
      case 13: // enter
        break;
      case 37: // key left
        break;
      case 38: // key up
        e.preventDefault();
        this.props.store.dispatch(Actions.goUp([0, ...this.props.position]));
        break;
      case 39: // key right
        break;
      case 40: // key down
        e.preventDefault();
        this.props.store.dispatch(Actions.goDown([0, ...this.props.position]));
        break;
      default:
        this.props.store.dispatch(Actions.editBullet([0, ...this.props.position], this.content.current.innerText));
        this.setState({ deletable: false });
        break;
    }
  }

  onNoteFocus(e) {
    this.setState({ noteActive: true, noteEmpty: false });
  }

  onNoteKeyDown(e) {
    switch(e.keyCode) {
      case 9: // tab
        e.preventDefault();
        break;
      default:
        break;
    }
  }

  onNoteKeyUp(e) {
    switch(e.keyCode) {
      default:
        this.props.store.dispatch(Actions.editBulletNote([0, ...this.props.position], this.note.current.innerText));
        this.setState({ deletable: false });
    }
  }

  onNoteBlur(e) {
    this.setState({ noteActive: false, noteEmpty: (this.note.current.innerText === "") });
  }

  onDragStart(e) {
    e.dataTransfer.setData("Text", [0, ...this.props.position].toString());
  }

  onDragSiblingEnter(e) {
    this.setState({ siblingBorder: true });
  }

  onDragSiblingOver(e) {
    e.preventDefault();
    this.setState({ siblingBorder: true });
  }

  onDragSiblingLeave(e) {
    this.setState({ siblingBorder: false });
  }

  onDragChildEnter(e) {
    this.setState({ childBorder: true });
  }

  onDragChildOver(e) {
    e.preventDefault();
    this.setState({ childBorder: true });
  }

  onDragChildLeave(e) {
    this.setState({ childBorder: false });
  }

  onDropChild(e) {
    e.preventDefault();
    let childPosition = e.dataTransfer.getData("Text").split(",").map(index => parseInt(index));
    let newParentPosition = [0, ...this.props.position];
    if (Actions.sameArray(childPosition, newParentPosition)) {
      this.setState({ childBorder: false, siblingBorder: false });
      return;
    }
    this.props.store.dispatch(Actions.moveBulletAsChild(childPosition, newParentPosition));
    this.setState({ childBorder: false, siblingBorder: false });
  }

  onDropSibling(e) {
    e.preventDefault();
    let childPosition = e.dataTransfer.getData("Text").split(",").map(index => parseInt(index));
    let newSiblingPosition = [0, ...this.props.position];
    this.props.store.dispatch(Actions.moveBulletAsSibling(childPosition, newSiblingPosition));
    this.setState({ childBorder: false, siblingBorder: false });
  }

  onClick(e) {
    this.props.store.dispatch(Actions.toggleCollapse([0, ...this.props.position])); // toggles collapse that persists when note is changed/closed
    this.setState({ collapsed: !this.state.collapsed }); // toggles collapse in real-time
  }

  componentDidMount() {
  }

  render() {
    return (
      <div className="bullet container-fluid w-100" id={ this.state.id }>
        <div className="content d-flex flex-row" onMouseEnter={ this.onMouseEnter.bind(this) } onMouseLeave={ this.onMouseLeave.bind(this) }>
          <div className="align-self-center position-relative">
            <span className="position-absolute"
                  style={{ left: -20, top: 3.5 }}>
              { this.state.children.length > 0 &&
                <button className="expand border-0"
                        onClick={ this.onClick.bind(this) }
                        style={{ backgroundColor: "transparent" }}>
                  <svg height="15px"
                       width="15px"
                       viewBox="0 0 100 100">
                    { this.state.children.length > 0 && this.state.expandVisible && this.state.collapsed &&
                        <polygon points="0,0 0,100 100,50" fill="dimgrey"/>
                    }
                    { this.state.children.length > 0 && this.state.expandVisible && !(this.state.collapsed) &&
                        <polygon points="0,0 50,100 100,0" fill="dimgrey"/>
                    }
                  </svg>
                </button>
              }
            </span>
            <span draggable={ true }
                  onDragStart={ this.onDragStart.bind(this) }
                  onDragEnter={ this.onDragSiblingEnter.bind(this) }
                  onDragOver={ this.onDragSiblingOver.bind(this) }
                  onDragLeave={ this.onDragSiblingLeave.bind(this) }
                  onDrop={ this.onDropSibling.bind(this) }>
                <button className="icon border-0" style={{backgroundColor: "transparent"}} disabled>
                  <svg height="35px"
                       width="35px"
                       viewBox="0 0 100 100">
                    <circle cx="50%"
                            cy="50%"
                            r="25"
                            stroke="lightgrey"
                            strokeWidth="25"
                            fill="dimgrey" />
                  </svg>
              </button>
            </span>
          </div>
          <div className="flex-grow-1 align-self-center">
            <div className="bullet-content"
                 contentEditable="true"
                 suppressContentEditableWarning="true"
                 ref={ this.content }
                 style={{ outline: "0px solid transparent" }}
                 onKeyDown={ this.onKeyDown.bind(this) }
                 onKeyUp={ this.onKeyUp.bind(this) }
                 onDragEnter={ e => e.preventDefault() }
                 onDragOver={ e => e.preventDefault() }>
              { this.state.content }
            </div>
          </div>
        </div>
        <div className="p-0 note w-100" style={{ display: (this.state.noteEmpty ? "none" : "") }}>
          <div className="align-self-center pl-5 w-100">
            <div className="bullet-note w-50"
                 contentEditable="true"
                 suppressContentEditableWarning="true"
                 ref={ this.note }
                 onFocus={ this.onNoteFocus.bind(this) }
                 onBlur={ this.onNoteBlur.bind(this) }
                 onKeyDown={ this.onNoteKeyDown.bind(this) }
                 onKeyUp={ this.onNoteKeyUp.bind(this) }
                 style={{
                   fontSize: "12px",
                   outline: "0px solid transparent",
                   display:"block",
                   textOverflow: "ellipsis",
                   overflow: "hidden",
                   whiteSpace: "nowrap"
                 }}>
              { this.state.note }
            </div>
          </div>
        </div>
        <div className="d-flex flex-row children">
          <div className="align-self-center border-0">
            <Collapse in={ !(this.state.collapsed) } timeout={10}>
              <div className="children border-left ml-4 pl-3">
                { this.state.children.length > 0 &&
                    this.state.children.map((child, index) =>
                      <Bullet key={ child.id }
                              position={ [...this.props.position, index] }
                              store={ this.props.store }
                              self={ child }>
                      </Bullet>
                    )
                }
              </div>
            </Collapse>
          </div>
        </div>
      </div>
    );
  }


    render1() {
      return (
        <div
             className="bullet ml-5"
             id={ this.state.id }>
          <div onMouseEnter={ this.onMouseEnter.bind(this) }
               onMouseLeave={ this.onMouseLeave.bind(this) }>
            <ul id="content" className={ "content position-relative list-inline mb-1" + (this.state.siblingBorder ? " border-bottom" : "")}>
              <li draggable={ true }
                  className="list-inline-item"
                  onDragStart={ this.onDragStart.bind(this) }
                  onDragEnter={ this.onDragSiblingEnter.bind(this) }
                  onDragOver={ this.onDragSiblingOver.bind(this) }
                  onDragLeave={ this.onDragSiblingLeave.bind(this) }
                  onDrop={ this.onDropSibling.bind(this) }>
                <button className="icon border-0" style={{backgroundColor: "transparent"}} disabled>
                  <svg height="35px"
                       width="35px"
                       viewBox="0 0 100 100">
                    <circle cx="50%"
                            cy="50%"
                            r="25"
                            stroke="lightgrey"
                            strokeWidth="25"
                            fill="dimgrey" />
                  </svg>
                </button>
              </li>
              <li className={"list-inline-item align-text-top w-75" + (this.state.childBorder ? " border-bottom" : "")}
                  onDragEnter={ this.onDragChildEnter.bind(this) }
                  onDragOver={ this.onDragChildOver.bind(this) }
                  onDragLeave={ this.onDragChildLeave.bind(this) }
                  onDrop={ this.onDropChild.bind(this) }>
                <div className="bullet-content"
                     contentEditable="true"
                     suppressContentEditableWarning="true"
                     ref={ this.content }
                     style={{ outline: "0px solid transparent" }}
                     onKeyDown={ this.onKeyDown.bind(this) }
                     onKeyUp={ this.onKeyUp.bind(this) }
                     onDragEnter={ e => e.preventDefault() }
                     onDragOver={ e => e.preventDefault() }>
                  { this.state.content }
                </div>
              </li>
              <li className="list-inline-item align-middle position-absolute"
                  style={{ left: -15, top: 3.5 }}>
                { this.state.children.length > 0 &&
                  <button className="expand border-0"
                     onClick={ this.onClick.bind(this) }
                     style={{ backgroundColor: "transparent" }}>
                    <svg height="10px"
                         width="10px"
                         viewBox="0 0 100 100">
                      { this.state.children.length > 0 && this.state.expandVisible && this.state.collapsed &&
                          <polygon points="0,0 0,100 100,50" fill="dimgrey"/>
                      }
                      { this.state.children.length > 0 && this.state.expandVisible && !(this.state.collapsed) &&
                          <polygon points="0,0 50,100 100,0" fill="dimgrey"/>
                      }
                    </svg>
                  </button>
                }
              </li>
            </ul>
            <div className="note pl-5"
                 style={{ display: (this.state.noteEmpty ? "none" : "block") }}>
              <div className="bullet-note pl-2"
                   contentEditable="true"
                   suppressContentEditableWarning="true"
                   ref={ this.note }
                   style={{
                     fontSize: "12px",
                     outline: "0px solid transparent",
                     display:"block",
                     textOverflow:(this.state.noteActive ? "" : "ellipsis"),
                     overflowX: (this.state.noteActive ? "" : "hidden"),
                     whiteSpace: (this.state.noteActive ? "" : "nowrap")
                   }}
                   onFocus={ this.onNoteFocus.bind(this) }
                   onBlur={ this.onNoteBlur.bind(this) }
                   onKeyDown={ this.onNoteKeyDown.bind(this) }
                   onKeyUp={ this.onNoteKeyUp.bind(this) }>
                { this.state.note }
              </div>
            </div>
          </div>
          <Collapse in={ !(this.state.collapsed) } timeout={10}>
            <div className="children border-0 ml-3">
              { this.state.children.length > 0 &&
                  this.state.children.map((child, index) =>
                    <Bullet key={ child.id }
                            position={ [...this.props.position, index] }
                            store={ this.props.store }
                            self={ child }>
                    </Bullet>
                  )
              }
            </div>
          </Collapse>
          <div className=""></div>
        </div>
      )
    }


}

export default Bullet;
